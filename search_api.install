<?php

/**
 * @file
 * Install, update and uninstall functions for the Search API module.
 */

/**
 * Implements hook_schema().
 */
function search_api_schema() {
  $schema['search_api_server'] = array(
    'description' => 'Stores all search servers created through the Search API.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a server.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The displayed name for a server.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'description' => 'The machine name for a server.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'The displayed description for a server.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'class' => array(
        'description' => 'The id of the service class to use for this server.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'options' => array(
        'description' => 'The options used to configure the service object.',
        'type' => 'text',
        'size' => 'medium',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
      'enabled' => array(
        'description' => 'A flag indicating whether the server is enabled.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'status' => array(
        'description' => 'The exportable status of the entity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'enabled' => array('enabled'),
    ),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
    'primary key' => array('id'),
  );

  $schema['search_api_index'] = array(
    'description' => 'Stores all search indexes on a {search_api_server}.',
    'fields' => array(
      'id' => array(
        'description' => 'An integer identifying the index.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'A name to be displayed for the index.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'description' => 'The machine name of the index.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => "A string describing the index' use to users.",
        'type' => 'text',
        'not null' => FALSE,
      ),
      'server' => array(
        'description' => 'The {search_api_server}.machine_name with which data should be indexed.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
      ),
      'item_type' => array(
        'description' => 'The type of items stored in this index.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'options' => array(
        'description' => 'An array of additional arguments configuring this index.',
        'type' => 'text',
        'size' => 'medium',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
      'enabled' => array(
        'description' => 'A flag indicating whether this index is enabled.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'read_only' => array(
        'description' => 'A flag indicating whether to write to this index.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'The exportable status of the entity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'item_type' => array('item_type'),
      'server' => array('server'),
      'enabled' => array('enabled'),
    ),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
    'primary key' => array('id'),
  );

  $schema['search_api_item'] = array(
    'description' => 'Stores the items which should be indexed for each index, and their status.',
    'fields' => array(
      'item_id' => array(
        'description' => "The item's entity id (e.g. {node}.nid for nodes).",
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'index_id' => array(
        'description' => 'The {search_api_index}.id this item belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'changed' => array(
        'description' => 'Either a flag or a timestamp to indicate if or when the item was changed since it was last indexed.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'indexing' => array('index_id', 'changed'),
    ),
    'primary key' => array('item_id', 'index_id'),
  );

  $schema['search_api_item_string_id'] = array(
    'description' => 'Stores the items which should be indexed for each index, and their status. Used only for items with string IDs.',
    'fields' => array(
      'item_id' => array(
        'description' => "The item's ID.",
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'index_id' => array(
        'description' => 'The {search_api_index}.id this item belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'changed' => array(
        'description' => 'Either a flag or a timestamp to indicate if or when the item was changed since it was last indexed.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'indexing' => array('index_id', 'changed'),
    ),
    'primary key' => array('item_id', 'index_id'),
  );

  $schema['search_api_task'] = array(
    'description' => 'Stores pending tasks for servers.',
    'fields' => array(
      'id' => array(
        'description' => 'An integer identifying this task.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'server_id' => array(
        'description' => 'The {search_api_server}.machine_name for which this task should be executed.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'A keyword identifying the type of task that should be executed.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'index_id' => array(
        'description' => 'The {search_api_index}.machine_name to which this task pertains, if applicable for this type.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
      ),
      'data' => array(
        'description' => 'Some data needed for the task, might be optional depending on the type.',
        'type' => 'text',
        'size' => 'medium',
        'serialize' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'server' => array('server_id'),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function search_api_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    // Check whether at least one server has pending tasks.
    if (search_api_server_tasks_count()) {
      $items = array();

      $conditions = array('enabled' => TRUE);
      foreach (search_api_server_load_multiple(FALSE, $conditions) as $server) {
        $count = search_api_server_tasks_count($server);
        if ($count) {
          $args = array(
            '@name' => $server->name,
          );
          $text = format_plural($count, '@name has @count pending task.', '@name has @count pending tasks.', $args);
          $items[] = l($text, "admin/config/search/search_api/server/{$server->machine_name}/execute-tasks");
        }
      }

      if ($items) {
        $text = t('There are pending tasks for the following servers:');
        $text .= theme('item_list', array(
          'type' => 'ul',
          'items' => $items,
        ));
        if (count($items) > 1) {
          $label = t('Execute pending tasks on all servers');
          $text .= l($label, 'admin/config/search/search_api/execute-tasks');
        }
        $requirements['search_api_pending_tasks'] = array(
          'title' => t('Search API'),
          'value' => $text,
          'severity' => REQUIREMENT_WARNING,
        );
      }
    }
  }

  return $requirements;
}

/**
 * Implements hook_install().
 *
 * Creates a default node index if the module is installed manually.
 */
function search_api_install() {
  // In case the module is installed via an installation profile, a batch is
  // active and we skip that.
  if (batch_get()) {
    return;
  }

  $name = t('Default node index');
  $values = array(
    'name' => $name,
    'machine_name' => preg_replace('/[^a-z0-9]+/', '_', backdrop_strtolower($name)),
    'description' => t('An automatically created search index for indexing node data. Might be configured to specific needs.'),
    'server' => NULL,
    'item_type' => 'node',
    'options' => array(
      'index_directly' => 1,
      'cron_limit' => '50',
      'data_alter_callbacks' => array(
        'search_api_alter_node_access' => array(
          'status' => 1,
          'weight' => '0',
          'settings' => array(),
        ),
      ),
      'processors' => array(
        'search_api_case_ignore' => array(
          'status' => 1,
          'weight' => '0',
          'settings' => array(
            'strings' => 0,
          ),
        ),
        'search_api_html_filter' => array(
          'status' => 1,
          'weight' => '10',
          'settings' => array(
            'title' => 0,
            'alt' => 1,
            'tags' => "h1 = 5\n" .
                "h2 = 3\n" .
                "h3 = 2\n" .
                "strong = 2\n" .
                "b = 2\n" .
                "em = 1.5\n" .
                "u = 1.5",
          ),
        ),
        'search_api_tokenizer' => array(
          'status' => 1,
          'weight' => '20',
          'settings' => array(
            'spaces' => '[^\\p{L}\\p{N}]',
            'ignorable' => '[-]',
          ),
        ),
      ),
      'fields' => array(
        'type' => array(
          'type' => 'string',
        ),
        'title' => array(
          'type' => 'text',
          'boost' => '5.0',
        ),
        'promote' => array(
          'type' => 'boolean',
        ),
        'sticky' => array(
          'type' => 'boolean',
        ),
        'created' => array(
          'type' => 'date',
        ),
        'changed' => array(
          'type' => 'date',
        ),
        'author' => array(
          'type' => 'integer',
          'entity_type' => 'user',
        ),
        'comment_count' => array(
          'type' => 'integer',
        ),
        'search_api_language' => array(
          'type' => 'string',
        ),
        'body:value' => array(
          'type' => 'text',
        ),
      ),
    ),
  );
  entity_info_cache_clear();
  search_api_index_insert($values);
  backdrop_set_message(t('The Search API module was installed. A new default node index was created.'));
  // Dynamically generated variable data was detected on the following lines.
  // /search_api/search_api.install line 998
}

/**
 * Implements hook_enable().
 *
 * Mark all items as "dirty", since we can't know whether they are.
 */
function search_api_enable() {
  $types = array();
  foreach (search_api_index_load_multiple(FALSE) as $index) {
    if ($index->enabled) {
      $types[$index->item_type][] = $index;
    }
  }
  foreach ($types as $type => $indexes) {
    try {
      $controller = search_api_get_datasource_controller($type);
      $controller->startTracking($indexes);
    }
    catch (SearchApiException $e) {
      watchdog_exception('search_api', $e);
    }
  }
}

/**
 * Implements hook_disable().
 */
function search_api_disable() {
  entity_info_cache_clear();
  $types = array();
  foreach (search_api_index_load_multiple(FALSE) as $index) {
    $types[$index->item_type][] = $index;
  }
  foreach ($types as $type => $indexes) {
    try {
      $controller = search_api_get_datasource_controller($type);
      $controller->stopTracking($indexes);
    }
    catch (SearchApiException $e) {
      // Modules defining entity or item types might have been disabled. Ignore.
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function search_api_uninstall() {
  config_clear('search_api.settings', 'search_api_index_worker_callback_runtime');
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7101() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7102() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7103() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7107() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7104() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7105() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7106() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7108() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7109() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7110() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7111() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7112() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7113() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7114() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7115() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7116() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7117() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_update_7118() { }

/**
 * Implements hook_update_last_removed().
 */
function search_api_update_last_removed() {
  return 7118;
}

/**
 * Implements hook_update_N().
 */
function search_api_update_1000() {
  $config = config('search_api.settings');
  $config->set('search_api_tasks', update_variable_get('search_api_tasks', 'dynamic value in file /search_api/search_api.install line 998'));
  $config->set('search_api_index_worker_callback_runtime', update_variable_get('search_api_index_worker_callback_runtime', '15'));
  update_variable_del('search_api_tasks');
  update_variable_del('search_api_index_worker_callback_runtime');
}
